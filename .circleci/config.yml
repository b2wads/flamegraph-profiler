version: 2.1

orbs:
  docker: circleci/docker@0.5.13

commands:
  all-tests:
    description: "Roda todos os testes do projeto (unitários e integração)"
    steps:
      - run: "npm t && npm run test:coverage-report"

jobs:
  node6x: &template
    docker:
      - image: circleci/node:6
    steps:
      - checkout
      - run:
          name: Install deps
          command: npm install
      - run:
          name: Format check
          command: npm run fmt:check
      - all-tests
      - run:
          when: on_success
          command: bash <(curl -s https://codecov.io/bash)

  node8x:
      <<: *template
      docker:
        - image: circleci/node:8

  node10x:
      <<: *template
      docker:
        - image: circleci/node:10

  node12x:
      <<: *template
      docker:
        - image: circleci/node:12


  build:
    description: Faz login no registry, monta uma imagem docker e faz push para o registry
    parameters:
      registry:
        type: string
      registry-username:
        type: string
      registry-password:
        type: string
      image:
        type: string
        default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
      image-tag:
        type: string
    executor: docker/machine
    steps:
      - checkout
      - docker/check:
          registry: << parameters.registry >>
          docker-username: << parameters.registry-username >>
          docker-password: << parameters.registry-password >>
      - docker/build: &build-template
          step-name: Building docker image
          registry: << parameters.registry >>
          image: << parameters.image >>
          tag: << parameters.image-tag >>
      - docker/push:
          <<: *build-template
          step-name: Pushing to registry
          tag: << parameters.image-tag >>
  
  notify-build-status:
    description: Envia uma mensagem na página do PR com informações do build
    parameters:
      registry:
        type: string
      image:
        type: string
        default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
      image-tag:
        type: string
      github-repo-path:
        type: string
        default: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
      github-api-address:
        type: string
        default: https://api.github.com
      github-address:
        type: string
        default: https://github.com
      github-api-token:
        type: string
    executor: docker/machine
    steps:
      - run:
          name:  Notify build status
          command: |
            GITHUB_PR_NUMBER=$(echo "$CIRCLE_PULL_REQUEST" | sed 's/.*\/pull\///g')
            GITHUB_COMMIT_PAGE_URL=<< parameters.github-address >>/<< parameters.github-repo-path >>/pull/$GITHUB_PR_NUMBER/commits/$CIRCLE_SHA1
            GITHUB_API_URL=<< parameters.github-api-address >>/repos/<< parameters.github-repo-path >>/issues/$GITHUB_PR_NUMBER/comments
            COMMIT_HASH=${CIRCLE_SHA1:0:7}
            DOCKER_IMAGE=<< parameters.registry >>/<< parameters.image >>:<< parameters.image-tag >>
            MESSAGE_BODY=":robot: A docker image of this app was pushed to registry!\n\n \
              :package: Built with commit [$COMMIT_HASH]($GITHUB_COMMIT_PAGE_URL) \
              \n\n :rocket: Pull this image in **$DOCKER_IMAGE**"

            response=$(curl -v -d  "{\"body\":\"$MESSAGE_BODY\"}" -H "Content-Type: application/json" \
            -H "Authorization: token << parameters.github-api-token >>" POST -o /dev/null -s -w "%{http_code}\n" $GITHUB_API_URL)
            if [ "${response: -3}" -ne "201" ]; then echo "Erro ao notificar build" && exit 1; fi

workflows:
  version: 2
  required-checks:
    jobs:
      - node6x:
          context: docker-registry-auth
      - node10x:
          context: docker-registry-auth
      - node12x:
          context: docker-registry-auth

  optional-checks:
    jobs:
      - node8x:
          context: docker-registry-auth
